import numpy as np
a = np.array([[1, 2], [3, 4], [5, 6]])
print('Размерность', a.ndim)
print('Размеры по каждому измерению', a.shape)
print('Количество всех элементов', a.size)
print('Минимум массива', a.min())
print('Максимум массива', a.max())
print('Минимальное значение в каждом столбце', a.min(axis = 0))
print('Минимальное значение в каждой строке', a.min(axis = 1))
print('Сумма всех элементов массива', a.sum())
print('Сумма каждого столбца массива', a.sum(axis = 0))
print('Суммавсех каждой строки массива', a.sum(axis = 1))
print('Среднее значение всех элементов', a.mean())
print('Среднее значение элементов в каждом столбце', a.mean(axis = 0))
print('Среднее значение элементов в каждой строке', a.mean(axis = 1))


b = np.arange(1, 10, 2)  # Создание от n до m - 1 с шагом k

zer = np.zeros(5)  # Создание массива заполненого n нулями
zer1 = np.zeros((5, 1))  # Создание массива, заполненого n массивами, в каждом из которых m нулей

one = np.ones(5)  # Создание массива заполненого n единицами
one1 = np.ones((5, 1))  # Создание массива, заполненого n массивами, в каждом из которых m нулей

lin = np.linspace(1, 4, 4, retstep = True)  # Создание массива от n до m с количеством элементов k и шагом retstep

c = np.arange(6)
c = np.reshape(c, (3, 2))  # Делит массив c на массив с n массивами, в каждом из которых m элементов
c[0, 0] = 9  # замена элемента [n, m] на x

d = np.arange(6)
d = np.reshape(d, (3, -1))  # -1 вместо m для автоматического определения кол-ва элементов в каждом подмассиве
d = np.reshape(d, -1)  # обратно

e = np.array([[1, 2], [3, 4]])
f = np.array([[1, 2], [3, 4]])
ef = np.vstack((e, f))  # Соединяет массивы в один(все эл-ты первого, затем второго)
ef1 = np.hstack((e, f))  # Соединяет массивы в один(соединяются элементы подмассивов каждого массива)

efSUM = e + f  # Суммирует каждый элемент с каждым такого же индекса
efVIC = e - f  # -
efPR = e * f  # *
efDEL = e / f  # /
efSUPERPR = np.dot(e, f)  # Умножает каждый элемент на каждый другого массива


g = np.reshape(np.arange(6), (2, -1))
g = np.power(g, 2)  # Возведение в степень k каждого элемента массива
g = np.power(g, g)  # Возведение каждого элемента в степень индекса элемента

h = np.arange(8) ** 2  # Созддается массив от 0 до 7 и каждый элемент возводится в степень k
# Индексация как и в обычных массивах
# Индексация в двумерных массивах вместо [i][j] - [i, j]
print(h)
print(h[2: 7: 2])  # Срез от n до m - 1 с шагом k

j = np.array([[0, 1, 2], [10, 11, 12], [100, 101, 102]])
for i in np.ravel(j):  # Прохождение по элементам массива как по одномерному массиву
    print('Element', i)

k = np.arange(6) * 2
print(k > 4)  # Сравнивает каждый элемент массива с значением n
print(k[k > 4])  # Выводит значенияя элементов массива, больших n

''' 
Прочтение из файла
f = np.loadtxt("file.txt", delimiter = " ")  # файл, разделитель
f1 = np.loadtxt("file.txt", usecols = (1, 2))  # считываем только 1 и 2 столбцы из файла
f2 = np.loadtxt("file.txt", skiprows = 2)  # Считываем из файла без k первых строк
np.savetxt("name.txt", delimeter = ',')  # Запись в файл, через запятую
'''
